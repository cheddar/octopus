# This file should be run with 'source' (also known as '.' on linux/macs).
#
# It creates several functions that allow the user to login and then query data
# via the octopus query endpoint.
#
# Note that this is currently set up to query the Tidepool development server.
# However, you can change the TIDEPOOL_SERVER environment variable and
# use a different server. See Tidepool for details

# Use the first line for a local server, the second for Tidepool's dev server
# TIDEPOOL_SERVER="http://localhost:8009"
TIDEPOOL_SERVER="https://devel-api.tidepool.io"
#
# Usage example:
#
# $source query.cli
# $tp_login me@myserver.com
# <enter password>
# $tp_query

# Login to the tidepool-platfrom and get a session-token
tp_login() {

    if [ -z "$1" ]; then
        echo "your user name is required (i.e. tp_login <username>)"
        return
    fi

    # save the headers in a tempfile so we can extract the token
    TEMPFILE="tplogin-$$.tmp"
    curl -s -X POST --dump-header $TEMPFILE -u $1 $DEFAULT_ENV/auth/login
    # now put the token in the environment
    export LOGIN_TOKEN=$(grep "x-tidepool-session-token:" $TEMPFILE)
    rm $TEMPFILE

    # are you logged in?
    loggedIn="$(grep "200 OK" headers)"
    if [ -z "$LOGIN_TOKEN" ]; then
        echo ""
        echo "Something went wrong trying to login. Bad password? Wrong server?"
        return
    fi
    echo ""
    echo "You're now logged in."
}

# Logout by clearing the token we are storing
tp_logout() {
    export LOGIN_TOKEN=
    echo ""
    echo "You have now logged out."
}

# Run the data query for a given user id
tp_query() {

    # are you logged in?
    if [ -z "$LOGIN_TOKEN" ]; then
        echo "please login first i.e. tp_login <username>"
        return
    fi

    # do we have a user id for us to query?
    if [ -z "$1" ]; then
        echo "we need the id of the user whose data you are querying i.e. tp_query <userid>"
        return
    fi

    # do you want to specify different types to query for?
    QUERY_TYPES="cbg, smbg, bolus, wizard"

    if [ -n "$2" ]; then
        QUERY_TYPES=$2
    fi

    # do you want to constrain the query by time?
    QUERY_WHERE=""

    if [ -n "$3" ]; then
        # e.g. "WHERE time > 2014-11-24T05:00:00.000Z AND time < 2014-12-24T05:00:00.000Z"
        QUERY_WHERE=$3
    fi

    QUERY="METAQUERY WHERE userid IS $1 QUERY TYPE IN $QUERY_TYPES $QUERY_WHERE SORT BY time AS Timestamp REVERSED"

    # send these prompts to stdout so that you can redirect the output of this
    # command to a file to save the result
    >&2 echo "The query will be:"
    >&2 echo $QUERY
    >&2 echo ""
    read  -p "Enter to run the query or [c] to cancel:" input

    if [ "$input" = "c" ]; then
        echo ""
        echo "Query cancelled."
    else
        curl -X POST -H '"$LOGIN_TOKEN"' -d "$QUERY" $TIDEPOOL_SERVER/query/data
    fi
}